function cov_2pq9vl3l2k(){var path="C:\\Users\\Surbhi bhor\\Desktop\\Case study\\microservices\\searchFlight\\flights.js";var hash="a868e5b1b3a4401a2cddf26b541cba667c6e123f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Surbhi bhor\\Desktop\\Case study\\microservices\\searchFlight\\flights.js",statementMap:{"0":{start:{line:2,column:16},end:{line:2,column:34}},"1":{start:{line:3,column:12},end:{line:3,column:21}},"2":{start:{line:4,column:19},end:{line:4,column:41}},"3":{start:{line:5,column:0},end:{line:5,column:27}},"4":{start:{line:8,column:21},end:{line:8,column:45}},"5":{start:{line:9,column:18},end:{line:9,column:47}},"6":{start:{line:12,column:13},end:{line:12,column:28}},"7":{start:{line:13,column:0},end:{line:13,column:49}},"8":{start:{line:15,column:17},end:{line:15,column:36}},"9":{start:{line:18,column:0},end:{line:20,column:33}},"10":{start:{line:19,column:11},end:{line:19,column:47}},"11":{start:{line:20,column:15},end:{line:20,column:31}},"12":{start:{line:22,column:0},end:{line:22,column:20}},"13":{start:{line:23,column:15},end:{line:23,column:39}},"14":{start:{line:30,column:23},end:{line:44,column:3}},"15":{start:{line:46,column:22},end:{line:46,column:50}},"16":{start:{line:47,column:2},end:{line:47,column:72}},"17":{start:{line:49,column:2},end:{line:49,column:26}},"18":{start:{line:105,column:0},end:{line:126,column:2}},"19":{start:{line:106,column:20},end:{line:112,column:5}},"20":{start:{line:115,column:17},end:{line:115,column:38}},"21":{start:{line:116,column:4},end:{line:124,column:6}},"22":{start:{line:117,column:8},end:{line:117,column:40}},"23":{start:{line:118,column:8},end:{line:118,column:34}},"24":{start:{line:121,column:8},end:{line:123,column:9}},"25":{start:{line:122,column:12},end:{line:122,column:22}},"26":{start:{line:143,column:0},end:{line:148,column:2}},"27":{start:{line:144,column:4},end:{line:147,column:6}},"28":{start:{line:145,column:8},end:{line:145,column:25}},"29":{start:{line:173,column:0},end:{line:187,column:3}},"30":{start:{line:174,column:4},end:{line:181,column:6}},"31":{start:{line:175,column:8},end:{line:180,column:9}},"32":{start:{line:176,column:12},end:{line:176,column:29}},"33":{start:{line:179,column:12},end:{line:179,column:32}},"34":{start:{line:214,column:0},end:{line:227,column:3}},"35":{start:{line:215,column:4},end:{line:226,column:6}},"36":{start:{line:216,column:8},end:{line:221,column:9}},"37":{start:{line:217,column:12},end:{line:217,column:29}},"38":{start:{line:220,column:12},end:{line:220,column:32}},"39":{start:{line:223,column:8},end:{line:225,column:9}},"40":{start:{line:224,column:12},end:{line:224,column:22}},"41":{start:{line:261,column:0},end:{line:275,column:3}},"42":{start:{line:262,column:17},end:{line:262,column:48}},"43":{start:{line:263,column:22},end:{line:263,column:58}},"44":{start:{line:265,column:4},end:{line:274,column:6}},"45":{start:{line:267,column:12},end:{line:267,column:29}},"46":{start:{line:268,column:12},end:{line:268,column:32}},"47":{start:{line:271,column:8},end:{line:273,column:9}},"48":{start:{line:272,column:12},end:{line:272,column:22}},"49":{start:{line:301,column:0},end:{line:312,column:5}},"50":{start:{line:302,column:4},end:{line:311,column:6}},"51":{start:{line:303,column:8},end:{line:303,column:26}},"52":{start:{line:304,column:8},end:{line:304,column:40}},"53":{start:{line:308,column:6},end:{line:310,column:7}},"54":{start:{line:309,column:8},end:{line:309,column:18}},"55":{start:{line:346,column:0},end:{line:364,column:5}},"56":{start:{line:347,column:20},end:{line:353,column:5}},"57":{start:{line:354,column:4},end:{line:363,column:6}},"58":{start:{line:356,column:6},end:{line:356,column:36}},"59":{start:{line:358,column:2},end:{line:358,column:26}},"60":{start:{line:360,column:6},end:{line:362,column:7}},"61":{start:{line:361,column:8},end:{line:361,column:18}},"62":{start:{line:368,column:0},end:{line:370,column:2}},"63":{start:{line:369,column:4},end:{line:369,column:68}},"64":{start:{line:372,column:0},end:{line:372,column:19}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:6},end:{line:19,column:7}},loc:{start:{line:19,column:11},end:{line:19,column:47}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:7},end:{line:20,column:8}},loc:{start:{line:20,column:15},end:{line:20,column:31}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:105,column:20},end:{line:105,column:21}},loc:{start:{line:105,column:32},end:{line:126,column:1}},line:105},"3":{name:"(anonymous_3)",decl:{start:{line:116,column:23},end:{line:116,column:24}},loc:{start:{line:116,column:32},end:{line:120,column:5}},line:116},"4":{name:"(anonymous_4)",decl:{start:{line:120,column:14},end:{line:120,column:15}},loc:{start:{line:120,column:23},end:{line:124,column:5}},line:120},"5":{name:"(anonymous_5)",decl:{start:{line:143,column:20},end:{line:143,column:21}},loc:{start:{line:143,column:32},end:{line:148,column:1}},line:143},"6":{name:"(anonymous_6)",decl:{start:{line:144,column:23},end:{line:144,column:24}},loc:{start:{line:144,column:34},end:{line:147,column:5}},line:144},"7":{name:"(anonymous_7)",decl:{start:{line:173,column:34},end:{line:173,column:35}},loc:{start:{line:173,column:47},end:{line:187,column:1}},line:173},"8":{name:"(anonymous_8)",decl:{start:{line:174,column:61},end:{line:174,column:62}},loc:{start:{line:174,column:72},end:{line:181,column:5}},line:174},"9":{name:"(anonymous_9)",decl:{start:{line:214,column:22},end:{line:214,column:23}},loc:{start:{line:214,column:35},end:{line:227,column:1}},line:214},"10":{name:"(anonymous_10)",decl:{start:{line:215,column:41},end:{line:215,column:42}},loc:{start:{line:215,column:52},end:{line:222,column:5}},line:215},"11":{name:"(anonymous_11)",decl:{start:{line:222,column:13},end:{line:222,column:14}},loc:{start:{line:222,column:19},end:{line:226,column:5}},line:222},"12":{name:"(anonymous_12)",decl:{start:{line:261,column:39},end:{line:261,column:40}},loc:{start:{line:261,column:52},end:{line:275,column:1}},line:261},"13":{name:"(anonymous_13)",decl:{start:{line:265,column:65},end:{line:265,column:66}},loc:{start:{line:265,column:76},end:{line:270,column:5}},line:265},"14":{name:"(anonymous_14)",decl:{start:{line:270,column:13},end:{line:270,column:14}},loc:{start:{line:270,column:19},end:{line:274,column:5}},line:270},"15":{name:"(anonymous_15)",decl:{start:{line:301,column:34},end:{line:301,column:35}},loc:{start:{line:301,column:48},end:{line:312,column:3}},line:301},"16":{name:"(anonymous_16)",decl:{start:{line:302,column:70},end:{line:302,column:71}},loc:{start:{line:302,column:84},end:{line:307,column:5}},line:302},"17":{name:"(anonymous_17)",decl:{start:{line:307,column:13},end:{line:307,column:14}},loc:{start:{line:307,column:20},end:{line:311,column:5}},line:307},"18":{name:"(anonymous_18)",decl:{start:{line:346,column:23},end:{line:346,column:24}},loc:{start:{line:346,column:37},end:{line:364,column:3}},line:346},"19":{name:"(anonymous_19)",decl:{start:{line:355,column:45},end:{line:355,column:46}},loc:{start:{line:355,column:59},end:{line:359,column:5}},line:355},"20":{name:"(anonymous_20)",decl:{start:{line:359,column:13},end:{line:359,column:14}},loc:{start:{line:359,column:20},end:{line:363,column:5}},line:359},"21":{name:"(anonymous_21)",decl:{start:{line:368,column:17},end:{line:368,column:18}},loc:{start:{line:368,column:23},end:{line:370,column:1}},line:368}},branchMap:{"0":{loc:{start:{line:121,column:8},end:{line:123,column:9}},type:"if",locations:[{start:{line:121,column:8},end:{line:123,column:9}},{start:{line:121,column:8},end:{line:123,column:9}}],line:121},"1":{loc:{start:{line:175,column:8},end:{line:180,column:9}},type:"if",locations:[{start:{line:175,column:8},end:{line:180,column:9}},{start:{line:175,column:8},end:{line:180,column:9}}],line:175},"2":{loc:{start:{line:216,column:8},end:{line:221,column:9}},type:"if",locations:[{start:{line:216,column:8},end:{line:221,column:9}},{start:{line:216,column:8},end:{line:221,column:9}}],line:216},"3":{loc:{start:{line:223,column:8},end:{line:225,column:9}},type:"if",locations:[{start:{line:223,column:8},end:{line:225,column:9}},{start:{line:223,column:8},end:{line:225,column:9}}],line:223},"4":{loc:{start:{line:271,column:8},end:{line:273,column:9}},type:"if",locations:[{start:{line:271,column:8},end:{line:273,column:9}},{start:{line:271,column:8},end:{line:273,column:9}}],line:271},"5":{loc:{start:{line:308,column:6},end:{line:310,column:7}},type:"if",locations:[{start:{line:308,column:6},end:{line:310,column:7}},{start:{line:308,column:6},end:{line:310,column:7}}],line:308},"6":{loc:{start:{line:360,column:6},end:{line:362,column:7}},type:"if",locations:[{start:{line:360,column:6},end:{line:362,column:7}},{start:{line:360,column:6},end:{line:362,column:7}}],line:360}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a868e5b1b3a4401a2cddf26b541cba667c6e123f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2pq9vl3l2k=function(){return actualCoverage;};}return actualCoverage;}cov_2pq9vl3l2k();//load express
const express=(cov_2pq9vl3l2k().s[0]++,require("express"));const app=(cov_2pq9vl3l2k().s[1]++,express());const bodyParser=(cov_2pq9vl3l2k().s[2]++,require("body-parser"));cov_2pq9vl3l2k().s[3]++;app.use(bodyParser.json());//load swagger
const swaggerJsDoc=(cov_2pq9vl3l2k().s[4]++,require("swagger-jsdoc"));const swaggerUi=(cov_2pq9vl3l2k().s[5]++,require("swagger-ui-express"));//load cors
const cors=(cov_2pq9vl3l2k().s[6]++,require('cors'));cov_2pq9vl3l2k().s[7]++;app.use(cors({origin:'http://localhost:4200'}));//load mongoose
const mongoose=(cov_2pq9vl3l2k().s[8]++,require("mongoose"));//---------------------------------------------------------------------------------------------------------------------------------------------
//connect to database
cov_2pq9vl3l2k().s[9]++;mongoose.connect("mongodb+srv://surbhi:12345@flight.paxk2.mongodb.net/flightData",{useNewUrlParser:true,useUnifiedTopology:true}).then(()=>{cov_2pq9vl3l2k().f[0]++;cov_2pq9vl3l2k().s[10]++;return console.log("Connected to database");}).catch(err=>{cov_2pq9vl3l2k().f[1]++;cov_2pq9vl3l2k().s[11]++;return console.log(err);});//load its model
cov_2pq9vl3l2k().s[12]++;require("./Flight");const Flight=(cov_2pq9vl3l2k().s[13]++,mongoose.model("Flight"));//---------------------------------------------------------------------------------------------------------------------------------------------
//         SWAGGER DOCUMENTATION
// Extended: https://swagger.io/specification/#infoObject
const swaggerOptions=(cov_2pq9vl3l2k().s[14]++,{swaggerDefinition:{info:{version:"1.0.0",title:"Flight API",description:"Flight API Information",contact:{name:"Surbhi"},servers:["http://localhost:4545"]}},// ['.routes/*.js']
apis:["flights.js"]});const swaggerDocs=(cov_2pq9vl3l2k().s[15]++,swaggerJsDoc(swaggerOptions));cov_2pq9vl3l2k().s[16]++;app.use("/api-flight",swaggerUi.serve,swaggerUi.setup(swaggerDocs));cov_2pq9vl3l2k().s[17]++;app.use(express.json());/**
 * @swagger
 * definitions:
 *  Flight:
 *   type: object
 *   properties:
 *    flightCode:
 *      type: string
 *      description: code of the flight
 *      example: 'SC101'
 *    airline:
 *      type: string
 *      description: name of the airline
 *      example: 'SpiceJet'
 *    source:
 *      type: string
 *      description: source
 *      example: 'mumbai'
 *    destination:
 *      type: string
 *      description: Destination
 *      example: 'delhi'
 *    fare:
 *      type: number
 *      description: fare of the flight
 *      example: 2000
 *    
 */ //---------------------------------------------------------------------------------------------------------------------------------------------
// 1] create functionality
/**
 * @swagger
 * /flight:
 *   post:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Successfully created
 */cov_2pq9vl3l2k().s[18]++;app.post("/flight",(req,res)=>{cov_2pq9vl3l2k().f[2]++;var newFlight=(cov_2pq9vl3l2k().s[19]++,{flightCode:req.body.flightCode,airline:req.body.airline,source:req.body.source,destination:req.body.destination,fare:req.body.fare});//create new flight
var flight=(cov_2pq9vl3l2k().s[20]++,new Flight(newFlight));cov_2pq9vl3l2k().s[21]++;flight.save().then(data=>{cov_2pq9vl3l2k().f[3]++;cov_2pq9vl3l2k().s[22]++;console.log("New Flight added");cov_2pq9vl3l2k().s[23]++;res.status(200).send(data);//res.json(data)        
}).catch(err=>{cov_2pq9vl3l2k().f[4]++;cov_2pq9vl3l2k().s[24]++;if(err){cov_2pq9vl3l2k().b[0][0]++;cov_2pq9vl3l2k().s[25]++;throw err;}else{cov_2pq9vl3l2k().b[0][1]++;}});//res.send("New flight added successfully")
});//---------------------------------------------------------------------------------------------------------------------------------------------
// 2] RETRIEVE ALL FLIGHTS
/**
 * @swagger
 * /flights:
 *  get:
 *    tags:
 *       - Flights
 *    description: Used to get all flights in database
 *    responses:
 *      '200':
 *        description: Successfully fetched flight
 *      '500':
 *        description: Server error
 */cov_2pq9vl3l2k().s[26]++;app.get("/flights",(req,res)=>{cov_2pq9vl3l2k().f[5]++;cov_2pq9vl3l2k().s[27]++;Flight.find().then(flights=>{cov_2pq9vl3l2k().f[6]++;cov_2pq9vl3l2k().s[28]++;res.json(flights);//console.log(flights);
});});//---------------------------------------------------------------------------------------------------------------------------------------------
// 3] retrieve flight by the code
/**
 * @swagger
 * /flightCode/{flightCode}:
 *  get:
 *    tags:
 *       - Flights
 *    summary: Fetch a flight.
 *    description: Used to fetch a single flight
 *    responses:
 *      '200':
 *        description: Successfully fetched flight
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: flightCode
 *         required: true
 *         schema:
 *           type: String
 *         description: The flight code
 */cov_2pq9vl3l2k().s[29]++;app.get("/flightCode/:flightCode",(req,res)=>{cov_2pq9vl3l2k().f[7]++;cov_2pq9vl3l2k().s[30]++;Flight.findOne({flightCode:req.params.flightCode}).then(flight=>{cov_2pq9vl3l2k().f[8]++;cov_2pq9vl3l2k().s[31]++;if(flight){cov_2pq9vl3l2k().b[1][0]++;cov_2pq9vl3l2k().s[32]++;res.send(flight);}else{cov_2pq9vl3l2k().b[1][1]++;cov_2pq9vl3l2k().s[33]++;res.sendStatus(404);}});// .catch(err =>{
//     if(err){
//         throw err;
//     }
// })
});//---------------------------------------------------------------------------------------------------------------------------------------------
// 4] Retrieve flight by their id 
/**
 * @swagger
 * /flight/{id}:
 *  get:
 *    tags:
 *       - Flights
 *    summary: Fetch a flight.
 *    description: Used to fetch a single flight
 *    responses:
 *      '200':
 *        description: Successfully fetched flight
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: The flight ID
 */cov_2pq9vl3l2k().s[34]++;app.get("/flight/:id",(req,res)=>{cov_2pq9vl3l2k().f[9]++;cov_2pq9vl3l2k().s[35]++;Flight.findById(req.params.id).then(flight=>{cov_2pq9vl3l2k().f[10]++;cov_2pq9vl3l2k().s[36]++;if(flight){cov_2pq9vl3l2k().b[2][0]++;cov_2pq9vl3l2k().s[37]++;res.json(flight);}else{cov_2pq9vl3l2k().b[2][1]++;cov_2pq9vl3l2k().s[38]++;res.sendStatus(404);}}).catch(err=>{cov_2pq9vl3l2k().f[11]++;cov_2pq9vl3l2k().s[39]++;if(err){cov_2pq9vl3l2k().b[3][0]++;cov_2pq9vl3l2k().s[40]++;throw err;}else{cov_2pq9vl3l2k().b[3][1]++;}});});//---------------------------------------------------------------------------------------------------------------------------------------------
// 5] Retrieve flight by source and destination
/**
 * @swagger
 * /flight/{source}/{destination}:
 *  get:
 *    tags:
 *       - Flights
 *    summary: Search flights
 *    description: Used to search flights
 *    responses:
 *      '200':
 *        description: Successfully searched flights
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: source
 *         required: true
 *         schema:
 *           type: String
 *         description: Source
 * 
 *       - in: path
 *         name: destination
 *         required: true
 *         schema:
 *           type: String
 *         description: Destination
 *       
 */cov_2pq9vl3l2k().s[41]++;app.get("/flight/:source/:destination",(req,res)=>{cov_2pq9vl3l2k().f[12]++;let source=(cov_2pq9vl3l2k().s[42]++,req.params.source.toLowerCase());let destination=(cov_2pq9vl3l2k().s[43]++,req.params.destination.toLowerCase());cov_2pq9vl3l2k().s[44]++;Flight.find({source:source,destination:destination}).then(flight=>{cov_2pq9vl3l2k().f[13]++;cov_2pq9vl3l2k().s[45]++;res.json(flight);cov_2pq9vl3l2k().s[46]++;console.log(flight);}).catch(err=>{cov_2pq9vl3l2k().f[14]++;cov_2pq9vl3l2k().s[47]++;if(err){cov_2pq9vl3l2k().b[4][0]++;cov_2pq9vl3l2k().s[48]++;throw err;}else{cov_2pq9vl3l2k().b[4][1]++;}});});//---------------------------------------------------------------------------------------------------------------------------------------------
// 6] removing flights
/**
 * @swagger
 * /flight/{flightCode}:
 *  delete:
 *    tags:
 *       - Flights
 *    summary: Delete a flight.
 *    description: Used to delete a flight
 *    responses:
 *      '200':
 *        description: Successfully deleted flight
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: flightCode
 *         required: true
 *         schema:
 *           type: String
 *         description: The flight ID
 */cov_2pq9vl3l2k().s[49]++;app.delete('/flight/:flightCode',(req,res)=>{cov_2pq9vl3l2k().f[15]++;cov_2pq9vl3l2k().s[50]++;Flight.findOneAndRemove({flightCode:req.params.flightCode}).then(response=>{cov_2pq9vl3l2k().f[16]++;cov_2pq9vl3l2k().s[51]++;res.send(response);cov_2pq9vl3l2k().s[52]++;console.log(` flight deleted`);//res.send("Flight removed successfully");
//console.log(flight);
}).catch(err=>{cov_2pq9vl3l2k().f[17]++;cov_2pq9vl3l2k().s[53]++;if(err){cov_2pq9vl3l2k().b[5][0]++;cov_2pq9vl3l2k().s[54]++;throw err;}else{cov_2pq9vl3l2k().b[5][1]++;}});});//---------------------------------------------------------------------------------------------------------------------------------------------
// 7]  UPDATING FLIGHT
/**
 * @swagger
 * /flight/{id}:
 *   put:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: flight object id
 *         in: path
 *         required: true
 *         schema:
 *          type: string
 *          description: user's object id
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Flight Successfully updated
 *       400:
 *         description: Server Error
 */cov_2pq9vl3l2k().s[55]++;app.put('/flight/:id',(req,res)=>{cov_2pq9vl3l2k().f[18]++;var newFlight=(cov_2pq9vl3l2k().s[56]++,{airline:req.body.airline,flightCode:req.body.flightCode,source:req.body.source,destination:req.body.destination,fare:req.body.fare});cov_2pq9vl3l2k().s[57]++;Flight.findByIdAndUpdate(req.params.id,{"$set":newFlight},{new:true}).then(response=>{cov_2pq9vl3l2k().f[19]++;cov_2pq9vl3l2k().s[58]++;console.log(`flight updated`);cov_2pq9vl3l2k().s[59]++;res.send(response.data);}).catch(err=>{cov_2pq9vl3l2k().f[20]++;cov_2pq9vl3l2k().s[60]++;if(err){cov_2pq9vl3l2k().b[6][0]++;cov_2pq9vl3l2k().s[61]++;throw err;}else{cov_2pq9vl3l2k().b[6][1]++;}});});//---------------------------------------------------------------------------------------------------------------------------------------------
//listen to the port
cov_2pq9vl3l2k().s[62]++;app.listen(4545,()=>{cov_2pq9vl3l2k().f[21]++;cov_2pq9vl3l2k().s[63]++;console.log("Up and running this is our flight search service");});cov_2pq9vl3l2k().s[64]++;module.exports=app;// app.delete('/flight/:id', (req, res) => {
//     Flight.deleteOne({id:req.params.id}).then((response) => {
//       res.send("Flight removed successfully");
//       //console.log(flight);
//     }).catch(err => {
//       if(err){
//         throw err;
//       }
//     })
//   });
//---------------------------------------------------------------------------------------------------------------------------------------------
// 7] Updating flights
// app.put('/flight/:flightCode', (req,res) => {
//     Flight.updateOne({flightCode: req.params.flightCode}, req.body).then((response) => {
//     Flight.findOne({flightCode: req.params.flightCode}).then(function(flight){
//         res.send(flight); 
//     })
//         //res.send("Flight updated successfully");
// }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
// app.put('/flight/:id', (req,res) => {
//     Flight.findByIdAndUpdate( req.params.id).then((response) => {
//          res.send(response.data)
//          console.log("Flight updated sucessfully");
//         //res.send("Flight updated successfully");
// }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,